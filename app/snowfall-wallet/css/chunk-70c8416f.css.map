{"version":3,"sources":["webpack:///src/components/common/SvgIcon.vue","webpack:///src/views/tabs/src/views/tabs/WalletInfo.vue","webpack:///src/views/tabs/src/views/tabs/StartStaking.vue","webpack:///src/components/src/components/StructureStats.vue","webpack:///src/views/tabs/Structures.vue","webpack:///src/components/TrxShort.vue","webpack:///src/views/src/views/Wallet.vue"],"names":[],"mappings":"AA4CA,gBAFE,qBAMA,CAJF,UACE,wBAAA,CACA,cAAA,CACA,eACA,CAEA,8DAEE,aAAA,CAEF,8DAEE,eAAA,CAEF,yBACE,WAAA,CAEF,gCACE,UAAA,CACA,WAAA,CAGJ,4BACE,kBAAA,CAEF,sCACE,UAAA,CACA,WAAA,CC6QF,kCACA,WAAA,CACA,iBAAA,CACA,wBACA,CACA,2CACA,iBAAA,CACA,aACA,CACA,yCACA,YACA,CACA,2DACA,YACA,CACA,mCACA,mCACA,CACA,gCACA,WACA,CACA,mCACA,WACA,CACA,yBACA,mCACA,aAAA,CACA,SACA,CACA,2CACA,sBAAA,CACA,iBAAA,CACA,QAAA,CACA,MAAA,CACA,OACA,CACA,CACA,0BACA,oBAAA,CACA,kBACA,CACA,4BACA,kBAAA,CACA,oBAAA,CACA,oBACA,CACA,wBACA,wBACA,CACA,iCACA,oBACA,CACA,2BACA,cAAA,CACA,mBAAA,CACA,oBACA,CACA,uBACA,WAAA,CACA,cAAA,CACA,kBAAA,CACA,kBACA,CC7TA,+BACA,WAAA,CACA,YACA,CACA,gCACA,cAAA,CACA,kBACA,CACA,mCACA,YAAA,CACA,oBACA,CACA,kCACA,oBACA,CACA,yBACA,gCACA,cAAA,CACA,WACA,CACA,CACA,wBACA,WACA,CACA,4EAEA,UACA,CACA,8CACA,wBACA,CCLA,oBACA,mBACA,CACA,kCACA,cACA,CCpCA,6BACE,gBAAA,CAEA,wCACE,oBAAA,CACA,cAAA,CAEA,4CACE,aAAA,CACA,WAAA,CAEF,8CACE,eAAA,CAEF,iDACE,kBAAA,CAEF,+CACE,oBAAA,CACA,kBAAA,CAEF,gDACE,oBAAA,CACA,qBAAA,CCfN,8BACE,oBAAA,CACA,cAAA,CAEA,oCACE,qBAAA,CAEA,+CACE,eAAA,CAIJ,wDACE,kBAAA,CAGJ,yBACE,kBAAA,CAEF,qEAEE,mBAAA,CACA,oBAAA,CCsEF,qBACA,UACA,CACA,+BACA,oBACA,CACA,6BACA,eACA,CACA,gCACA,UAAA,CACA,iBAAA,CACA,QAAA,CACA,SAAA,CACA,UAAA,CACA,OAAA,CACA,yBAAA,CACA,iBACA,CACA,sBACA,iBAAA,CACA,WACA,CAIA,8BACA,YACA","file":"chunk-70c8416f.css","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.icon {\n  vertical-align: middle;\n}\n.svg-icon {\n  stroke-width: 1 !important;\n  width: 1.125rem;\n  height: 1.125rem;\n  vertical-align: middle;\n\n  &.svg-icon--red-check,\n  &.svg-icon--green-check {\n    height: 0.75rem;\n  }\n  &.svg-icon--red-arrow,\n  &.svg-icon--green-arrow {\n    height: 0.5625rem;\n  }\n  &.svg-icon--plus {\n    height: 1rem;\n  }\n  &.svg-icon--file-upload {\n    width: 100%;\n    height: 100%;\n  }\n}\n.button.is-primary.is-small {\n  min-width: 1.825rem;\n}\n.button.is-primary.is-small .svg-icon {\n  width: 1rem;\n  height: 1rem;\n}\n","<template lang=\"pug\">\n  .columns.is-multiline.is-flex-mobile(v-if=\"prefix && wallet\")\n    .column.is-12-mobile.is-5-tablet.is-6-desktop\n      .card.is-address-widget.without-background\n        .card-content\n          h4.level\n            .level-left\n              SvgIcon(name=\"barcode\") \n              | {{ t('Your address') }}\n          .media.with-margins\n            .media-left\n              img.qr(@click=\"toggleModal\" :src=\"'https://chart.googleapis.com/chart?chs=256x256&cht=qr&chl=' + address + '&chf=bg,s,252A32'\")\n            .media-content.address {{ address }}\n            .media-right\n              a.button.is-primary.is-normal(v-clipboard:copy=\"address\" v-clipboard:success=\"onCopy\")\n                SvgIcon.icon(name=\"content-copy-white\")\n          .balance.has-text-centered.linear-border\n            h2.upper {{ toUmi(realPart * 100) }}\n              span.percents(v-if=\"prefix !== 'umi' && fakePart\") {{ fakePart }}\n              SvgIcon.sign(name=\"sign\")\n            .is-ultralight ≈ {{ pretty(realPart * 100) }}\n            a(v-if=\"prefix !== 'umi' && structure.url\" :href=\"structure.url\" target=\"_blank\") {{ t('Structure site') }}\n              .icon\n                SvgIcon(name=\"open-in-new\")\n\n    .column.is-12-mobile.is-7-tablet.is-6-desktop\n      .card.is-address-widget.without-background.fullheight\n        form.card-content(v-if=\"sendMode\" @submit.prevent=\"send\")\n          h4.level\n            .level-left\n              SvgIcon(name=\"send\") \n              | {{ t('Send') }}\n          .media.with-margins(:class=\"!isAddressValid ? 'is-danger' : ''\")\n            .media-left.is-ultralight\n              label(for=\"recipient\" v-translate) To the address\n            .media-content\n              textarea.textarea.has-fixed-size(\n                v-model=\"recipient\"\n                v-focus\n                @change=\"checkAddress\"\n                id=\"recipient\"\n                required\n                :placeholder=\"t('Enter the wallet address which you want to send money to')\"\n                rows=\"2\"\n              )\n          .columns.is-variable.is-1.is-vcentered.is-flex-mobile.is-multiline\n            .column.is-7.is-12-mobile.is-7-tablet\n              .media.with-field\n                label.media-left.is-ultralight(for=\"amount\" v-translate) Amount\n                .media-content\n                  input#amount.input(\n                    v-model=\"amount\"\n                    type=\"number\"\n                    :step=\"0.01\"\n                    lang=\"en-150\"\n                    @keydown=\"getFiat\"\n                    @keyup=\"getFiat\"\n                    @change=\"getFiat\"\n                    required\n                    :placeholder=\"0\"\n                  )\n                .media-right.is-ultralight.upper UMI\n\n            .column.is-1.has-text-centered.is-custom-mobile.is-1-tablet ≈\n            .column.is-4\n              .media.with-field\n                .media-content\n                  input.input(\n                    v-model=\"amountInFiat\"\n                    type=\"number\"\n                    :step=\"decimal > 2 ? 0.00000001 : 0.01\"\n                    lang=\"en-150\"\n                    :placeholder=\"0\"\n                    @keydown=\"getUmi\"\n                    @keyup=\"getUmi\"\n                    @change=\"getUmi\"\n                  )\n                .media-right.is-ultralight {{ currency }}\n\n          .level\n            .level-left\n              span.is-ultralight(v-translate) Remaining balance:\n              span.remains {{ toUmi(remains) }} UMI\n            .level-right\n              a(@click=\"allIn\" v-translate) Send all\n\n          .buttons\n            button.button.gradient-button(\n              type=\"submit\"\n              :disabled=\"!(this.isAddressValid && this.amount > 0 && this.amount <= this.inUmi)\"\n              v-translate\n            ) Send\n            a.button.is-link(@click=\"createSign\" v-translate) Create signature\n        \n        .card-content(v-else-if=\"confirmMode\")\n          h3.green(v-translate) Transfer confirmation\n          table.table.block-table\n            tr\n              td(v-translate) Amount\n              td \n                h2 {{ toUmi(amount*100) }} UMI\n            tr\n              td(v-translate) To the address\n              td.hash {{ recipient }}\n            tr \n              td(v-translate) New balance\n              td {{ toUmi(remains) }} UMI\n\n          .buttons\n            a.button.gradient-button(\n              @click=\"confirm\"\n              :class=\"{'is-loading': loading}\"\n              v-translate\n            ) Confirm\n            a.button.is-link(@click=\"back\" v-translate) Cancel\n\n        .card-content(v-if=\"signMode\")\n          h3.green(v-translate) Generate signature\n          .media.with-margins\n            .media-content\n              textarea.textarea.has-fixed-size(\n                v-model=\"message\"\n                @change=\"sign\"\n                @keyPress=\"sign\"\n                :placeholder=\"t('Insert a message to create a signature')\"\n                rows=\"2\"\n              )\n          .signature(v-if=\"signature\") {{ signature }}\n\n          .buttons(v-if=\"!signature\")\n            .button.gradient-button(\n              @click=\"sign\"\n            ) {{ t('Generate') }}\n            .button.is-link(@click=\"back\" v-translate) Back\n          .buttons(v-else)\n            .gradient-button(\n              v-clipboard:copy=\"signature\" \n              v-clipboard:success=\"onCopy\"\n            ) {{ t('Copy signature') }}\n            .button.is-link(@click=\"back\" v-translate) Back\n\n    .modal(:class=\"{'is-active':modalActive}\")\n      .modal-background(@click=\"toggleModal\")\n      .modal-content\n         p.image.is-256x256\n          img.qr(:src=\"'https://chart.googleapis.com/chart?chs=256x256&cht=qr&chl=' + address + '&chf=bg,s,FFFFFF'\")\n      button.modal-close.is-large(aria-label=\"close\" @click=\"toggleModal\")\n\n</template>\n\n<script>\nimport { mapActions, mapGetters } from \"vuex\";\nimport SvgIcon from \"@/components/common/SvgIcon\";\nimport * as umi from \"@umi-top/umi-core-js\";\n\nexport default {\n  name: \"WalletInfo\",\n  components: { SvgIcon },\n  data() {\n    return {\n      recipient: null,\n      isAddressValid: true,\n      amount: null,\n      amountInFiat: null,\n      sendMode: true,\n      confirmMode: false,\n      signMode: false,\n      message: null,\n      signature: null,\n      modalActive: false,\n      realPart: \"\",\n      fakePart: \"\",\n      timer: null,\n      updater: null\n    };\n  },\n  props: {\n    prefix: {\n      type: String,\n      default: \"umi\"\n    },\n    structure: {\n      default: null\n    }\n  },\n  computed: {\n    ...mapGetters([\n      \"loading\",\n      \"wallet\",\n      \"signedMessage\",\n      \"currency\",\n      \"decimal\",\n      \"course\"\n    ]),\n    address() {\n      return this.wallet.address;\n    },\n    balance() {\n      return this.realPart\n        ? Math.round(this.realPart * 100)\n        : this.wallet.balance;\n    },\n    remains() {\n      return this.amount > 0 && this.amount <= this.balance\n        ? this.balance - Math.round(this.amount * 100)\n        : this.balance;\n    },\n    inUmi() {\n      return this.balance / 100;\n    },\n    coefficient() {\n      const effective_interest = this.wallet.interest;\n      const periods = 30 * 24 * 60 * 60 * 10;\n      return (1 + effective_interest / 10000) ** (1 / periods);\n    }\n  },\n  methods: {\n    ...mapActions([\"sendTransaction\", \"signMessage\"]),\n    growInit() {\n      const start = new Date();\n      let tmp_balance = this.wallet.balance\n      this.timer = setInterval(() => {\n        let time_delta = new Date() - start;\n        let value =\n          tmp_balance * this.coefficient ** (time_delta / 100);\n        let balance = (value / 100).toFixed(5).split(\"\");\n\n        this.fakePart = \"\";\n        this.realPart = \"\";\n        for (var i = balance.length - 1; i >= 0; i--) {\n          if (i > balance.length - 4)\n            this.fakePart = balance[i] + this.fakePart;\n          else this.realPart = balance[i] + this.realPart;\n        }\n      }, 100);\n    },\n    toggleModal() {\n      this.modalActive = !this.modalActive;\n    },\n    getFiat() {\n      if (this.amount > this.inUmi) this.amount = this.inUmi;\n      if (this.amount < 0) this.amount = null;\n      if (this.amount > 0 && this.amount < 1) this.amount = parseFloat(this.amount);\n\n      if (this.amount)\n        this.amountInFiat = (this.amount * this.course).toFixed(this.decimal);\n      else this.amountInFiat = null;\n    },\n    getUmi() {\n      if (this.amountInFiat < 0) this.amountInFiat = null;\n      if (this.amountInFiat)\n        this.amount = (this.amountInFiat / this.course).toFixed(2);\n      else this.amount = null;\n    },\n    checkAddress() {\n      try {\n        umi.Address.fromBech32(this.recipient.trim());\n        if (this.address === this.recipient.trim()) this.isAddressValid = false;\n        else this.isAddressValid = true;\n      } catch {\n        this.isAddressValid = false;\n      }\n    },\n    allIn() {\n      this.amount = this.inUmi;\n      this.getFiat();\n    },\n    send() {\n      if (this.isAddressValid && this.amount > 0 && this.amount <= this.inUmi) {\n        this.sendMode = false;\n        this.confirmMode = true;\n      }\n    },\n    async confirm() {\n      if (!this.loading) {\n        let result = await this.sendTransaction({\n          recipient: this.recipient.trim(),\n          value: this.amount\n        });\n        if (result && result.hash) {\n          this.recipient = null;\n          this.amount = null;\n          this.amountInFiat = null;\n          this.$buefy.snackbar.open({\n            message:\n              \"Транзакция \" + this.cut(result.hash, 10) + \" отправлена в сеть!\",\n            actionText: null,\n            duration: 10000\n          });\n        } else {\n          this.$buefy.snackbar.open({\n            message: \"Не получилось совершить перевод.\",\n            type: \"is-danger\"\n          });\n        }\n        this.back();\n      }\n    },\n    createSign() {\n      this.sendMode = false;\n      this.signMode = !this.signMode;\n    },\n    sign() {\n      this.signMessage(this.message.trim());\n      this.signature = this.signedMessage;\n    },\n    back() {\n      this.sendMode = true;\n      this.confirmMode = false;\n      this.signMode = false;\n      this.signature = false;\n    },\n    update() {\n      clearInterval(this.timer);\n      if (this.wallet.interest && !this.wallet.special) {\n        this.growInit();\n      } else {\n        this.realPart = this.wallet.balance / 100;\n      }\n    }\n  },\n  created() {\n    this.update();\n    setInterval(() => this.update(), 30000)\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  },\n  watch: {\n    wallet: function() {\n      this.update();\n    },\n    currency: function() {\n      this.getFiat();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.card.fullheight {\n  height: 100%;\n  position: relative;\n  padding-bottom: 3.1875rem;\n}\n.card.fullheight .buttons {\n  position: absolute;\n  bottom: 0.75rem;\n}\n.card.fullheight .level {\n  display: flex;\n}\n.card.fullheight .level-left + .level-right {\n  margin-top: 0;\n}\n.modal-background {\n  background-color: rgba(34, 39, 46, 0.55);\n}\n.modal-content {\n  width: 256px;\n}\n.image.is-256x256 {\n  margin: auto;\n}\n@media (max-width: 769px) {\n  .is-custom-mobile {\n    width: 3.75rem;\n    flex: none;\n  }\n  .card.fullheight .buttons {\n    justify-content: center;\n    position: relative;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n}\n.remains {\n  display: inline-block;\n  padding-left: 0.5rem;\n}\n.signature {\n  white-space: normal;\n  word-break: break-all;\n  margin-bottom: 1.5rem;\n}\n.upper {\n  text-transform: uppercase;\n}\n.block-table td {\n  padding-right: 0.75rem;\n}\n.percents {\n  font-size: 1rem;\n  padding-left: 0.35rem;\n  padding-right: 0.35rem;\n}\n.sign {\n  height: 2rem;\n  width: 2.125rem;\n  margin-top: -0.35rem;\n  margin-left: 0.35rem;\n}\n</style>\n","<template lang=\"pug\">\n  .start-staking\n    .linear-border.content\n      .columns.is-vcentered.is-multiline\n        .column.is-12-mobile\n          h2(v-translate) Staking is the process of multiplying your coins\n          p(v-translate) The Staking technology helps UMI holders unite in structures and multiply the coins they own by simply storing them in their wallets.\n          a.gradient-button(@click=\"goToStructures\" v-translate) Choose structure and start staking\n        .column.is-narrow.is-hidden-mobile\n          SvgIcon.staking-icon(name=\"staking\")\n\n    .with-table.columns.is-centered.content\n      .column.is-8\n        h2.has-text-centered(v-translate) How much can I earn?\n        p(v-translate) The more coins are used for staking, the higher reward is received by each participant. To start staking, join any existing structure you like.\n        \n        p.has-text-centered.is-size-5(v-translate) The reward amount depends directly on the structure size\n          .table-container.centered\n            table.table.is-striped.is-fullwidth\n              tr\n                th(v-translate) Structure size (total number of UMI coins)\n                th(v-translate) Monthly increase (min)\n                th(v-translate) Monthly increase (max)\n              tr\n                td 50,000\n                td 5%\n                td 9%\n              tr\n                td 100,000\n                td 10%\n                td 14%\n              tr\n                td 500,000\n                td 15%\n                td 19%\n              tr\n                td 1,000,000\n                td 20%\n                td 24%\n              tr\n                td 5,000,000\n                td 25%\n                td 29%\n              tr\n                td 10,000,000\n                td 30%\n                td 34%\n              tr\n                td 50,000,000\n                td 31%\n                td 35%\n              tr\n                td 100,000,000\n                td 32%\n                td 36%\n              tr\n                td 500,000,000\n                td 34%\n                td 38%\n              tr\n                td 1,000,000,000\n                td 36%\n                td 40%\n        \n        p(v-translate) Just select a structure. Join the one whose terms you like most. Do not worry, you can leave the structure at any time without consequences. Your coins are safe.\n        \n        .has-text-centered\n          a.gradient-button(@click=\"goToStructures\" v-translate) Choose structure and start staking\n\n</template>\n\n<script>\nimport SvgIcon from \"@/components/common/SvgIcon\";\nexport default {\n  name: \"StartStaking\",\n  components: { SvgIcon },\n  methods: {\n    goToStructures() {\n      this.$emit(\"goToStructures\");\n    }\n  }\n};\n</script>\n\n<style scoped>\n.staking-icon {\n  width: 250px;\n  height: 280px;\n}\n.linear-border {\n  padding: 2.5rem;\n  margin: 2.5rem 3rem;\n}\n.linear-border h2 {\n  margin-top: 0;\n  margin-bottom: 2.5rem;\n}\n.linear-border p {\n  margin-bottom: 2.5rem;\n}\n@media (max-width: 769px) {\n  .linear-border {\n    padding: 1.5rem;\n    margin: 1rem;\n  }\n}\n.table {\n  border: none;\n}\n.table th:last-child,\n.table td:last-child {\n  color: #fff;\n}\n.with-table .gradient-button {\n  margin: 1.75rem auto 3rem;\n}\n</style>\n","<template lang=\"pug\">\n  .structure-stats(:class=\"{ 'resized': !!title }\")\n    h3(v-if=\"title\") {{ title }}\n    Widgets(:stats=\"stats\")\n</template>\n\n<script>\nimport Widgets from \"@/components/common/Widgets\";\n\nexport default {\n  name: \"StructureStats\",\n  components: { Widgets },\n  data() {\n    return {\n      balance: null\n    };\n  },\n  props: {\n    structure: {\n      default: {\n        staking: 0,\n        referral: 0,\n        stats: {\n          coins: 0,\n          members: 0,\n          income: 0\n        }\n      }\n    },\n    title: {\n      type: String,\n      default: null\n    }\n  },\n  computed: {\n    staking() {\n      let periods = 30;\n      let effective_interest = parseInt(this.structure.deposit_percent);\n      let nominal_interest =\n        periods * ((1 + effective_interest / 10000) ** (1 / periods) - 1);\n      return {\n        day: (nominal_interest / 30) * 100,\n        month: this.structure.deposit_percent / 100\n      };\n    },\n    coefficient() {\n      const effective_interest = this.structure.deposit_percent;\n      const periods = 30 * 24 * 60 * 60 * 10;\n      return (1 + effective_interest / 10000) ** (1 / periods);\n    },\n    stats() {\n      return [\n        {\n          label: this.$translate.text(\"Staking rate\"),\n          numbers: [\n            {\n              number: this.staking.day.toFixed(3),\n              suffix: \"% \" + this.$translate.text(\"per day\")\n            },\n            {\n              prefix: \" / \",\n              number: this.staking.month,\n              suffix: \"% \" + this.$translate.text(\"per month\")\n            }\n          ],\n          customClass: \"is-narrow is-narrow-mobile\"\n        },\n        {\n          label: this.$translate.text(\"Fee\"),\n          number: this.structure.fee_percent / 100,\n          suffix: \"%\",\n          customClass: \"is-narrow is-narrow-mobile\"\n        },\n        {\n          label: this.$translate.text(\"Coins\"),\n          number: this.balance,\n          suffix: \"UMI\",\n          customClass: \"is-narrow-mobile\"\n        },\n        {\n          label: this.$translate.text(\"Members\"),\n          number: this.structure.address_count || 0,\n          customClass: \"is-narrow-mobile\"\n        },\n        {\n          label: this.$translate.text(\"Structure Income\"),\n          number: this.structure.profit_percent / 100,\n          suffix: \"%\",\n          customClass: \"is-narrow is-narrow-mobile\"\n        }\n      ];\n    }\n  },\n  methods: {\n    growInit() {\n      const start = new Date();\n      this.timer = setInterval(() => {\n        let time_delta = new Date() - start;\n        this.balance =\n          this.structure.balance * this.coefficient ** (time_delta / 100);\n      }, 100);\n    }\n  },\n  created() {\n    this.growInit();\n  }\n};\n</script>\n\n<style scoped>\nh3 {\n  padding-bottom: 1rem;\n}\n.structure-stats {\n  padding: 0 1rem;\n}\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.structures {\n  padding: 0 0.75rem;\n\n  .structure {\n    margin-bottom: 1.5rem;\n    padding: 1.5rem;\n\n    img {\n      width: 1.75rem;\n      height: auto;\n    }\n    .name {\n      font-weight: bold;\n    }\n    .balance {\n      margin-left: 2.5rem;\n    }\n    .green {\n      display: inline-block;\n      padding-left: 0.5rem;\n    }\n    .status {\n      display: inline-block;\n      vertical-align: middle;\n    }\n  }\n}\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.transaction {\n  margin-bottom: 0.25rem;\n  padding: 1.5rem;\n\n  .line {\n    margin-bottom: 1.25rem;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  .icons > *:not(:first-child) {\n    margin-left: 0.35rem;\n  }\n}\n.amount {\n  white-space: nowrap;\n}\n.amount:not(:first-child),\n.address {\n  padding-left: 0.35rem;\n  text-decoration: none;\n}\n","<template lang=\"pug\">\n  .container\n    b-tabs(\n      v-model=\"activeTab\",\n      :animated=\"false\",\n      @input=\"changeTab\"\n      multiline\n      destroy-on-hide\n    )\n      b-tab-item(\n        label=\"UMI\"\n        icon=\"umi\"\n        ref=\"umi\"\n      )\n        WalletInfo(prefix=\"umi\") \n\n      b-tab-item(\n        v-for=\"(item, i) in structures\"\n        :key=\"i\"\n        :ref=\"item.prefix\"\n        :visible=\"item.connected\"\n      )\n        template(slot=\"header\")\n          .icon.custom-icon\n            img(v-if=\"item.prefix === 'roy'\" v-webp=\"require('@/assets/structures/roy.png')\")\n            img(v-if=\"item.prefix === 'isp'\" v-webp=\"require('@/assets/structures/isp.png')\")\n          span {{ item.name }}\n          \n        StructureStats(\n          :structure=\"item\"\n        )\n        WalletInfo(\n          :prefix=\"item.prefix\"\n          :structure=\"item\"\n        )\n\n      b-tab-item(\n        v-if=\"structures.length > 0\"\n      )\n        template(slot=\"header\")\n          .icon.custom-icon\n            SvgIcon(name=\"plus\")\n          span.custom-tab.dotted {{ t('Start staking') }}\n        StartStaking(@goToStructures=\"goToStructures()\")\n\n      b-tab-item(\n        v-if=\"structures.length > 0\"\n      )\n        template(slot=\"header\")\n          .icon\n            SvgIcon(name=\"apps\")\n          span.custom-tab.has-text-link {{ t('All structures') }}\n        Structures\n\n    template(v-if=\"activeTab <= structures.length\")\n      .level(v-if=\"stats.all > 0\")\n        .level-left\n          h3.has-text-centered-mobile(v-translate) Transactions\n        .level-right\n          .level-item\n            .tags.are-medium\n              .tag(:class=\"{'is-active' : filter === 'all'}\" @click=\"toggle('all')\") {{ t('All') }} {{ stats.all }}\n              .tag(:class=\"{'is-active' : filter === 'sended'}\" @click=\"toggle('sended')\" v-if=\"stats.sended\") {{ t('Sent') }} {{ stats.sended }}\n              .tag(:class=\"{'is-active' : filter === 'received'}\" @click=\"toggle('received')\") {{ t('Received') }} {{ stats.received }}\n\n      .transactions(v-if=\"transactions && transactions.length > 0\")\n        TrxShort(\n          v-if=\"transactions\"\n          v-for=\"(trx, i) in transactions\"\n          :key=\"i\"\n          :trx=\"trx\"\n          :address=\"wallet.address\"\n        )\n      .is-size-5.custom-bg(v-else-if=\"wallet.isNew\") {{ t(\"You haven’t had any transactions yet.\") }}\n\n      Pagination(\n        v-if=\"stats[filter] >= params.limit\"\n        @change=\"pagination\"\n        :perPage=\"params.limit\"\n        :total=\"total\"\n      )\n\n</template>\n\n<script>\nimport WalletInfo from \"@/views/tabs/WalletInfo\";\nimport StartStaking from \"@/views/tabs/StartStaking\";\nimport Structures from \"@/views/tabs/Structures\";\n\nimport TrxShort from \"@/components/TrxShort\";\nimport StructureStats from \"@/components/StructureStats\";\n\nimport Pagination from \"@/components/common/Pagination\";\nimport SvgIcon from \"@/components/common/SvgIcon\";\n\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: \"Wallet\",\n  components: {\n    WalletInfo,\n    StartStaking,\n    Structures,\n\n    TrxShort,\n    StructureStats,\n\n    Pagination,\n    SvgIcon\n  },\n  props: {\n    lastTab: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      activeTab: 0,\n      trxVisible: true,\n      interval: null\n    };\n  },\n  computed: {\n    ...mapGetters([\n      \"structures\",\n      \"wallet\",\n      \"loading\",\n      \"transactions\",\n      \"stats\",\n      \"params\",\n      \"filter\"\n    ]),\n    total() {\n      return this.stats[this.filter];\n    },\n    tabsCount() {\n      return document.querySelectorAll(\".tabs li\").length - 1;\n    }\n  },\n  methods: {\n    changeTab(tab) {\n      if (tab === 0) {\n        this.$store.dispatch(\"changeAddress\", \"umi\");\n      } else if (tab <= this.structures.length) {\n        this.$store.dispatch(\"changeAddress\", this.structures[tab - 1].prefix);\n      }\n    },\n    goToStructures() {\n      this.activeTab = this.tabsCount;\n    },\n    hideTab() {\n      this.structureCreated = true;\n      this.activeTab = this.activeTab - 1;\n    },\n    toggle(type = \"any\") {\n      this.$store.commit(\"setFilter\", type);\n      this.fetch();\n    },\n    pagination(params) {\n      this.$store.commit(\"setParams\", params);\n      this.fetch();\n    },\n    fetch() {\n      this.$store.dispatch(\"fetchTransactions\", this.params);\n    }\n  },\n  created() {\n    this.interval = setInterval(() => {\n      this.fetch();\n    }, 3000);\n  },\n  beforeDestroy: function() {\n    clearInterval(this.interval);\n  }\n};\n</script>\n\n<style scoped>\npre {\n  color: #fff;\n}\n.transactions {\n  margin-bottom: 1.5rem;\n}\n.custom-tab {\n  font-weight: 300;\n}\n.dotted:before {\n  content: \"\";\n  position: absolute;\n  left: 4px;\n  right: 4px;\n  bottom: 4px;\n  top: 3px;\n  border: 1px dashed #6b7381;\n  border-radius: 2px;\n}\n.all {\n  position: relative;\n  bottom: -8px;\n}\n</style>\n\n<style>\n.is-active span.dotted:before {\n  content: none;\n}\n</style>\n"]}