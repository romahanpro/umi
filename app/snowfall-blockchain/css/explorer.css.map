{"version":3,"sources":["webpack:///src/views/explorer/src/views/explorer/Block.vue","webpack:///src/components/explorer/TrxShort.vue","webpack:///src/views/explorer/src/views/explorer/Address.vue"],"names":[],"mappings":"AA8HA,wBACA,UACA,CCjBA,8BACE,oBAAA,CACA,cAAA,CAEA,oCACE,qBAAA,CAEA,+CACE,eAAA,CAIJ,wDACE,kBAAA,CAGJ,yBACE,kBAAA,CAEF,mDAEE,mBAAA,CACA,oBAAA,CCmJF,+BACA,oBACA,CACA,mCACA,YAAA,CACA,WAAA,CACA,WACA,CACA,2BACA,cAAA,CACA,mBAAA,CACA,oBACA,CACA,uBACA,WAAA,CACA,cAAA,CACA,kBAAA,CACA,kBACA","file":"explorer.css","sourcesContent":["<template lang=\"pug\">  \n  .container\n    .level\n      .level-left\n        h2(v-if=\"block\") {{ t('Block height') }} {{ block.height }}\n        h2(v-else-if=\"!loading\" v-translate) Block not yet created\n      .level-left(v-if=\"block\")\n        .is-ultralight {{ block.created_at | moment(\"DD.MM.YY HH:mm:ss [GMT] Z\") }}\n    .secondary.block-table.with-underline\n      .columns.is-multiline\n        .column\n          table.table\n            tr(v-if=\"block && block.height\")\n              td {{ t('Height') }}\n              td {{ block.height }}\n            tr(v-if=\"previous\")\n              td(v-translate) Previous block\n              td\n                router-link(:to=\"{ name: 'Block', params: { height: previous }}\") {{ previous }}\n            tr(v-if=\"block && block.height && next\")\n              td(v-translate) Next block\n              td\n                router-link(:to=\"{ name: 'Block', params: { height: next }}\") {{ next }}\n            tr(v-if=\"block && block.hash\")\n              td Hash\n              td(v-clipboard:copy=\"block.hash\" v-clipboard:success=\"onCopy\")\n                .columns.is-flex-mobile.is-vcentered\n                  .column\n                    .hash {{ block.hash }}\n                  .column.is-narrow\n                    button.button.is-primary.is-small(type='button' title=\"Скопировать tx\")\n                      SvgIcon.icon(name=\"content-copy-white\")\n        .column\n          table.table(v-if=\"block && transactions && transactions.length > 0\")\n            tr\n              td(v-translate) Version\n              td {{ block.version }}\n            tr\n              td(v-translate) Transactions\n              td {{ transactions.length }}\n            tr\n              td(v-translate) Total amount\n              td {{ toUmi(totalValue) }} UMI / {{ pretty(totalValue) }}\n            \n    template(v-if=\"transactions && transactions.length > 0\")\n      .level\n        .level-left\n          h2(v-translate) Transactions in block\n        .level-left\n      .transactions\n        Trx(\n          v-if=\"transactions\"\n          v-for=\"(trx, i) in transactions\"\n          :key=\"i\"\n          :trx=\"trx\"\n        )\n\n</template>\n\n<script>\nimport api from \"@/api/explorer\";\nimport Trx from \"@/components/explorer/Trx\";\nimport SvgIcon from \"@/components/common/SvgIcon\";\n\nexport default {\n  name: \"Block\",\n  components: { Trx, SvgIcon },\n  data() {\n    return {\n      loading: true,\n      block: null,\n      previous: null,\n      next: null,\n      totalValue: null,\n      transactions: null\n    };\n  },\n  methods: {\n    fetchBlock(height) {\n      if (height > 0) this.previous = height - 1;\n      this.next = (this.$store.getters.stats.blocks.summary >= (parseInt(height) + 1))\n        ? parseInt(height) + 1\n        : null\n      this.loading = true;\n\n      api\n        .getBlock(height)\n        .then(res => {\n          this.block = res.data.data;\n          this.loading = false;\n        })\n        .catch(() => {\n          this.block = null;\n          this.loading = false;\n        });\n\n      api\n        .getBlockTransactions(height)\n        .then(res => {\n          this.transactions = res.data.data;\n          this.totalValue = this.transactions.reduce(\n            (acc, trx) => (acc + ((trx.value ? parseInt(trx.value) : 0) + (trx.fee_value ? parseInt(trx.fee_value) : 0))),\n            0\n          )\n        });\n    }\n  },\n  mounted() {\n    let height = this.$route.params.height;\n    if (height) {\n      this.fetchBlock(height);\n    }\n  },\n  watch: {\n    \"$route.params.height\": {\n      handler: function(height) {\n        this.fetchBlock(height);\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n};\n</script>\n\n<style scoped>\n.table {\n  width: 100%;\n}\n</style>\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.transaction {\n  margin-bottom: 0.25rem;\n  padding: 1.5rem;\n\n  .line {\n    margin-bottom: 1.25rem;\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n\n  .icons > *:not(:first-child) {\n    margin-left: 0.35rem;\n  }\n}\n.amount {\n  white-space: nowrap;\n}\n.amount,\n.address {\n  padding-left: 0.35rem;\n  text-decoration: none;\n}\n","<template lang=\"pug\">\n  .container.address-viewer\n    .tile.is-ancestor\n      .tile.is-parent\n        article.tile\n          .card.tile.is-child.is-address-widget\n            .card-content\n              h4.level\n                .level-left\n                  SvgIcon.barcode(name=\"barcode\") \n                  | {{ t('UMI address')}}\n              .media.with-margins(v-if=\"wallet.address\")\n                .media-left\n                  img.qr(@click=\"toggleModal\" :src=\"'https://chart.googleapis.com/chart?chs=256x256&cht=qr&chl=' + address + '&chf=bg,s,252A32'\")\n                .media-content {{ wallet.address }}\n                .media-right\n                  a.button.is-primary(v-clipboard:copy=\"address\" v-clipboard:success=\"onCopy\")\n                    SvgIcon(name=\"content-copy-white\")\n              .balance.has-text-centered.linear-border(v-if=\"wallet\")\n                h2.upper {{ toUmi(realPart * 100) }}\n                  span.percents(v-if=\"fakePart && !wallet.balance.composite_value\") {{ fakePart }}\n                  SvgIcon.sign(name=\"sign\")\n                .is-ultralight ≈ {{ pretty(realPart * 100) }}\n\n      .tile.is-vertical.is-4\n        .tile\n          .tile.is-parent.is-vertical\n            .card.tile.is-child.is-vertical-centered\n              .card-content\n                .is-ultralight(v-translate) Total sent\n                h3\n                  growing-number(:value='wallet.sent.value' suffix=\"UMI\")\n            .card.tile.is-child.is-vertical-centered\n              .card-content\n                .is-ultralight(v-translate) Total received\n                h3\n                  growing-number(:value='wallet.received.value' suffix=\"UMI\")\n    \n    section.section(v-if=\"stats.all > 0\")\n      .container\n        .level\n          .level-left\n            h3.has-text-centered-mobile(v-translate) Transactions\n          .level-right\n            .level-item\n              .tags.are-medium\n                .tag(\n                  :class=\"{'is-active' : filter === 'all'}\"\n                  @click=\"changeFilter('all')\"\n                ) {{ t('All') }} ({{ stats.all }})\n                .tag(\n                  :class=\"{'is-active' : filter === 'sended'}\"\n                  @click=\"stats.sended > 0 ? changeFilter('sended') : null\"\n                ) {{ t('Sent') }} ({{ stats.sended }})\n                .tag(\n                  :class=\"{'is-active' : filter === 'received'}\"\n                  @click=\"stats.received > 0 ? changeFilter('received') : null\"\n                ) {{ t('Received') }} ({{ stats.received }})\n        \n        Pagination(\n          v-if=\"stats[filter] > params.limit\"\n          @change=\"pagination\"\n          :perPage=\"params.limit\"\n          :total=\"total\"\n        )\n\n        .transactions(v-if=\"transactions && transactions.length > 0\")\n          TrxShort(\n            v-if=\"transactions\"\n            v-for=\"(trx, i) in transactions\"\n            :key=\"i\"\n            :trx=\"trx\"\n            :address=\"address\"\n          )\n        \n        Pagination(\n          v-if=\"stats[filter] > params.limit\"\n          @change=\"pagination\"\n          :perPage=\"params.limit\"\n          :total=\"total\"\n        )\n\n    .modal(:class=\"{'is-active':modalActive}\")\n      .modal-background(@click=\"toggleModal\")\n      .modal-content\n         p.image.is-256x256\n          img.qr(:src=\"'https://chart.googleapis.com/chart?chs=256x256&cht=qr&chl=' + address + '&chf=bg,s,FFFFFF'\")\n      button.modal-close.is-large(aria-label=\"close\" @click=\"toggleModal\")\n\n</template>\n\n<script>\nimport SvgIcon from \"@/components/common/SvgIcon\";\nimport TrxShort from \"@/components/explorer/TrxShort\";\nimport GrowingNumber from \"@/components/common/GrowingNumber\";\nimport Pagination from \"@/components/common/Pagination\";\nimport api from \"@/api/explorer\";\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  name: \"Address\",\n  components: {\n    SvgIcon,\n    TrxShort,\n    GrowingNumber,\n    Pagination\n  },\n  data() {\n    return {\n      loading: false,\n      wallet: {\n        balance: 0,\n        received: {\n          count: 0,\n          value: 0\n        },\n        sent: {\n          count: 0,\n          value: 0\n        },\n        count: 0\n      },\n      realPart: \"\",\n      fakePart: \"\",\n      transactions: [],\n      params: {\n        limit: 10,\n        offset: 0\n      },\n      filter: \"all\",\n      interval: null,\n      timer: null,\n      modalActive: false,\n      address: this.$route.params.address\n    };\n  },\n  computed: {\n    ...mapGetters([\"currency\"]),\n    coefficient() {\n      const effective_interest = this.wallet.balance.confirmed_percent || 0;\n      const periods = 30 * 24 * 60 * 60 * 10;\n      return (1 + effective_interest / 10000) ** (1 / periods);\n    },\n    total() {\n      if (this.filter === \"sended\")\n        return parseInt(this.wallet.sent.count);\n      if (this.filter === \"received\")\n        return parseInt(this.wallet.received.count);\n      return this.wallet.count;\n    },\n    stats() {\n      return {\n        all: this.wallet.count,\n        sended: this.wallet.sent.count,\n        received: this.wallet.received.count\n      }\n    }\n  },\n  methods: {\n    growInit() {\n      const start = new Date();\n      this.timer = setInterval(() => {\n        let time_delta = new Date() - start;\n        let value = this.wallet.balance.confirmed_value * this.coefficient ** (time_delta / 100);\n        let balance = (value / 100).toFixed(5).split(\"\");\n        this.fakePart = \"\";\n        this.realPart = \"\";\n        for (var i = balance.length - 1; i >= 0; i--) {\n          if (i > balance.length - 4)\n            this.fakePart = balance[i] + this.fakePart;\n          else this.realPart = balance[i] + this.realPart;\n        }\n      }, 100);\n    },\n    toggleModal() {\n      this.modalActive = !this.modalActive;\n    },\n    changeFilter(type = null) {\n      if(this.filter !== type) {\n        this.filter = type;\n        this.page = 1;\n        this.params.offset = 0;\n        if(this.$route.query.page) {\n          this.$router.push({ query: { page: 1 }})\n        }\n        this.fetchTransactions();\n      }\n    },\n    pagination(params) {\n      if(params.offset > 0) {\n        clearInterval(this.interval);\n        this.interval = null\n      } else if(!this.interval) {\n        this.interval = setInterval(() => {\n          this.fetchTransactions();\n        }, 10000);  \n      }\n      if(params.offset !== this.params.offset) {\n        this.params = params;\n        this.fetchTransactions();\n      }\n      this.params = params;\n    },\n    fetchTransactions() {\n      if(this.address && this.address.length == 62)\n        api\n          .getAddressTransactions(this.address, this.params, this.filter)\n          .then(({ data }) => {\n            if(this.transactions.length !== data.data.length || this.wallet.balance.composite_value)\n              this.fetchAddress()\n            this.transactions = data.data;\n          })\n          .catch(() => {\n            clearInterval(this.timer);\n            clearInterval(this.interval);\n          })\n    },\n    fetchAddress() {\n      if(this.address && this.address.length == 62)\n        api.getAddress(this.address)\n          .then(res => {\n            this.wallet = res.data.data;\n            this.update()\n          })\n          .catch((err) => {\n            console.log(err)\n            clearInterval(this.timer);\n            clearInterval(this.interval);\n            this.$route.push('/')\n          })\n    },\n    update() {\n      clearInterval(this.timer)\n      if (this.wallet.balance.confirmed_percent && !this.wallet.balance.composite_value) {\n        this.growInit();\n        //this.realPart = this.wallet.balance.confirmed_value / 100;\n      } else {\n        this.realPart = this.wallet.balance.confirmed_value / 100;\n      }\n    },\n    fetchData() {\n      clearInterval(this.timer);\n      clearInterval(this.interval);\n\n      this.fetchAddress();\n      this.fetchTransactions();\n      this.interval = setInterval(() => this.fetchTransactions(), 10000);  \n    }\n  },\n  mounted() {\n    this.fetchData();\n  },\n  beforeDestroy: function() {\n    clearInterval(this.timer);\n    clearInterval(this.interval);\n  },\n  watch: {\n    \"$route.params.address\": {\n      handler: function() {\n        if(this.address !== this.$route.params.address) {\n          this.address = this.$route.params.address\n          this.filter = 'all'\n          this.realPart = ''\n          this.fakePart = ''\n          this.transactions = []\n          this.params = {\n            limit: 10,\n            offset: 0\n          }\n          this.fetchData()\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n};\n</script>\n\n<style scoped>\n.transactions {\n  margin-bottom: 1.5rem;\n}\n.image.is-256x256 {\n  height: 256px;\n  width: 256px;\n  margin: auto;\n}\n.percents {\n  font-size: 1rem;\n  padding-left: 0.35rem;\n  padding-right: 0.35rem;\n}\n.sign {\n  height: 2rem;\n  width: 2.125rem;\n  margin-top: -0.35rem;\n  margin-left: 0.35rem;\n}\n</style>\n"]}